#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var rsg = require('../lib/rsg');
var argv = require('minimist')(process.argv.slice(2));

(function() {
  if (!argv._[0] || argv.h || argv.help) {
    return fs.createReadStream(path.resolve(__dirname, 'usage.txt'))
      .pipe(process.stdout)
      .on('close', function() { process.exit(1); });
  }

  if (argv.V || argv.version) {
    return console.log(require('../package.json').version);
  }

  var CWD = process.cwd();
  var opts = {};

  opts.input = argv._.length === 1 ? argv._[0] : argv._.map(function(file) { return path.resolve(CWD, file); });
  opts.output = argv.o || argv.output;
  opts.title = argv.t || argv.title;
  opts.basePath = argv.b || argv.basePath;
  opts.pushState = argv.p || argv.pushState;
  opts.verbose = argv.v || argv.verbose;
  opts.files = argv.f || argv.files;
  opts.files = opts.files && opts.files.split(',').map(function(file) { return file.trim(); });

  rsg(opts).generate(function(err) {
    if (err) {
      console.error(String(err));
      process.exit(1);
    }

    if (opts.verbose) {
      var gray = '\u001b[90m';
      var magenta = '\u001b[35m';
      var reset = '\u001b[0m';

      var time = '[' + gray + new Date().toLocaleTimeString() + reset + ']';

      console.log(time, magenta + this.opts.output);
    }

    process.exit(0);
  });
})();
